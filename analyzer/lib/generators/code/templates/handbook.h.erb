#ifndef HANDBOOK_H
#define HANDBOOK_H

#include <string>

#include <atoms/atom.h>
#include <mc/common_mc_data.h>
#include <mc/dynamic_mc.h>
#include <mc/tree_mc.h>
#include <tools/common.h>
#include <tools/scavenger.h>
#include <tools/json_steps_logger.h>
#include <species/keeper.h>
<% if lateral_reactions_exists? %>
#include <species/lateral_spec.h>
<% end %>
#include <species/specific_spec.h>
using namespace vd;

<%= head_includes %>

#define MC DynamicMC

class Handbook
{
private:
    static std::string __configsDir;

public:
    static void setConfigsDir(const std::string &configsDir);
    static const std::string &configsDir();
    static std::string runConfigPath();
    static std::string envConfigPath();
    static std::string ratesConfigPath();

public:
    typedef PhaseBoundary SurfaceAmorph;
    typedef <%= surface_crystal.class_name %> SurfaceCrystal;

private:
<% if lateral_reactions_exists? %>
private:
    typedef Keeper<LateralSpec, &LateralSpec::findLateralReactions> LKeeper;
    static LKeeper __lateralKeeper;
public:
    static LKeeper &lateralKeeper();
<% end %>

private:
    typedef Keeper<SpecificSpec, &SpecificSpec::findTypicalReactions> SKeeper;
    static SKeeper __specificKeeper;
public:
    static SKeeper &specificKeeper();

#ifdef JSONLOG
private:
    static JSONStepsLogger __stepsLogger;
public:
    static JSONStepsLogger &stepsLogger();
#endif // JSONLOG

private:
    static MC __mc;
    static SurfaceAmorph __amorph;
    static Scavenger __scavenger;

public:
    ~Handbook();

    static MC &mc();
    static SurfaceAmorph &amorph();
    static Scavenger &scavenger();

    static bool isRegular(ushort type);

    static ushort activesFor(ushort type);
    static ushort hydrogensFor(ushort type);
    static ushort hToActivesFor(ushort type);
    static ushort activesToHFor(ushort type);

private:
    static const bool __atomsAccordance[];
    static const ushort __atomsSpecifing[];

    static const ushort __regularAtomsTypes[];
    static const ushort __regularAtomsNum;

<% if ubiquitous_reactions_exists? %>
    static const ushort __hToActives[];
    static const ushort __activesToH[];

public:
    static const ushort __hOnAtoms[];
    static const ushort __activesOnAtoms[];
<% end %>

public:
    static const ushort __atomsNum;

    static bool atomIs(ushort complexType, ushort typeOf);
    static ushort specificate(ushort type);
};

#endif // HANDBOOK_H
