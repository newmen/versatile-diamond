#include "<%= file_name %>.h"
<%= body_includes %>

<%= class_name %>::<%= class_name %>(const dim3 &sizes, const Behavior *behavior, int defaultSurfaceHeight) :
    <%= crystal_properties_class_name %><Crystal>(sizes, behavior), _defaultSurfaceHeight(defaultSurfaceHeight)
{
}

<%= class_name %>::~<%= class_name %>()
{
    Finder::removeAll(atoms().data(), atoms().size());
}

void <%= class_name %>::buildAtoms()
{
    makeLayer(0, <%= major_atom_index %>, <%= zero_level_atom_actives %>);
    for (int i = 1; i < _defaultSurfaceHeight; ++i)
    {
        makeLayer(i, NO_VALUE, <%= major_atom_actives %>);
    }
}

void <%= class_name %>::bondAllAtoms()
{
    eachAtom([this](Atom *atom) {
        assert(atom->lattice());
        bondAround(atom);
    });
}

void <%= class_name %>::detectAtomTypes()
{
    eachAtom([this](Atom *atom) {
        if (atom->type() == NO_VALUE)
        {
            ushort type = detectType(atom);
            atom->changeType(type);
        }
    });
}

Atom *<%= class_name %>::makeAtom(ushort type, ushort actives, const int3 &coords)
{
    AtomBuilder builder;
    Atom *atom = builder.<%= builder_method_name %>(type, actives, this, coords);
    return atom;
}

bool <%= class_name %>::hasBottom(const int3 &coords)
{
    return <%= has_bottom_condition %>;
}

void <%= class_name %>::findAll()
{
    Finder::initFind(atoms().data(), atoms().size());
}

ushort Diamond::detectType(const Atom *atom)
{
<%= define_type_algorithm %>
}
